ARG NODE_VERSION="18.16.0"
ARG IMAGE_NODE_OS="bullseye-slim"
ARG IMAGE_NODE_TAG="docker.io/library/node:${NODE_VERSION}-${IMAGE_NODE_OS}"

ARG PLAYWRIGHT_VERSION="1.34.3"
ARG IMAGE_PLAYWRIGHT_OS="jammy"
ARG IMAGE_PLAYWRIGHT_TAG="mcr.microsoft.com/playwright:v${PLAYWRIGHT_VERSION}-${IMAGE_PLAYWRIGHT_OS}"

ARG NPM_VERSION="9.7.1"
ARG PNPM_VERSION="8.6.2"

ARG NPM_REGISTRY_URL="http://localhost:8081/repository/npm/"
ARG NPM_REGISTRY_OLD_URL_CONFIG=""
ARG NPM_REGISTRY_URL_CONFIG="//localhost:8081/repository/npm/"
ARG NPM_REGISTRY_AUTH="ZGV2Om1GMjN4N3BxVjlOdVdxTg=="
ARG NPM_REGISTRY_AUTH_TOKEN="NpmToken.ef6bf8bf-8bf6-3847-8241-7b0d59d9adde"

################################################################################
# Layer target: Smallest image
################################################################################
FROM docker.io/redhat/ubi8-micro as smol

################################################################################
# Layer target: node image
################################################################################
FROM ${IMAGE_NODE_TAG} as node

ARG NPM_VERSION
ARG PNPM_VERSION
ARG NPM_REGISTRY_URL
ARG NPM_REGISTRY_OLD_URL_CONFIG
ARG NPM_REGISTRY_URL_CONFIG
ARG NPM_REGISTRY_AUTH
ARG NPM_REGISTRY_AUTH_TOKEN

# Flag as a Continuous Integration server.
ENV CI=true

# Flag that automation can use to detect if execution is hosted in a container.
ENV IN_CONTAINER=true

COPY ./configure-npm.sh /usr/local/bin/configure-npm

RUN chmod +x /usr/local/bin/configure-npm \
  && configure-npm \
  "${NPM_VERSION}" \
  "${PNPM_VERSION}" \
  "${NPM_REGISTRY_URL}" \
  "${NPM_REGISTRY_OLD_URL_CONFIG}" \
  "${NPM_REGISTRY_URL_CONFIG}" \
  "${NPM_REGISTRY_AUTH}" \
  "${NPM_REGISTRY_AUTH_TOKEN}"

################################################################################
# Layer target: project dependencies
################################################################################
FROM node as dependencies

RUN mkdir -p /tmp/dependencies/

# application package (not the root)
COPY ./package.json /tmp/dependencies/

WORKDIR /tmp/dependencies/

RUN pnpm install \
  && rm -f ./package.json ./pnpm-lock.yaml

VOLUME [ "/tmp/dependencies/" ]

################################################################################
# Layer target: contains project libraries
################################################################################
FROM node as node_libraries

RUN mkdir -p /usr/src/libraries/

# Expects: `--build-context libraries=container-image://localhost/leadof/libraries:latest`
COPY --from=libraries /usr/src/libraries/ /usr/src/libraries/

RUN chmod +x /usr/src/libraries/shell/executable

VOLUME [ "/usr/src/libraries/" ]

################################################################################
# Layer target: contains project src
################################################################################
FROM node_libraries as src

RUN mkdir -p /usr/src/apps/leadof-us/node_modules/

COPY --from=dependencies /tmp/dependencies/node_modules/ /usr/src/apps/leadof-us/node_modules/

COPY . /usr/src/apps/leadof-us/

WORKDIR /usr/src/apps/leadof-us/

# make all shell scripts executable
RUN . /usr/src/libraries/shell/executable \
  && rm -rf /tmp/dependencies/

################################################################################
# Layer target: lint the application
################################################################################
FROM src as run_lint

RUN mkdir -p /usr/src/test-results/ \
  && mkdir -p ./test-results/lint/ \
  && pnpm lint \
  && echo "Linting succeeded: $(date)" > /usr/src/test-results/lint-results.txt \
  && rm -rf /usr/src/apps/

WORKDIR /usr/src/test-results/

VOLUME [ "/usr/src/test-results/" ]

################################################################################
# Layer target: lint results
################################################################################
FROM smol as lint

COPY --from=run_lint /usr/src/test-results/ /usr/src/test-results/

VOLUME [ "/usr/src/test-results/" ]

################################################################################
# Layer target: node with chrome browser
################################################################################
FROM node as node_chrome

WORKDIR /tmp/

RUN apt-get update -qq \
  && DEBIAN_FRONTEND=noninteractive apt-get install -qqy --no-install-recommends wget ca-certificates \
  && wget --no-verbose https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
  && DEBIAN_FRONTEND=noninteractive apt-get install -qqy --no-install-recommends ./google-chrome-stable_current_amd64.deb \
  && rm -f ./google-chrome-stable_current_amd64.deb \
  # clean up docker layer
  # https://docs.docker.com/develop/develop-images/dockerfile_best_practices/#run
  && rm -rf /var/lib/apt/lists/*

ENV CHROME_BIN=/usr/bin/google-chrome

################################################################################
# Layer target: build the application
################################################################################
FROM node_chrome as run_unit_test

COPY --from=src /usr/src/ /usr/src/

WORKDIR /usr/src/apps/leadof-us/

RUN mkdir -p /usr/src/test-results/ \
  && mkdir -p ./test-results/unit_test/ \
  && pnpm test \
  && mv ./test-results/unit_test/* /usr/src/test-results/ \
  && rm -f /usr/src/test-results/.gitkeep \
  && rm -rf /usr/src/apps/ \
  && apt-get update -qq \
  && DEBIAN_FRONTEND=noninteractive apt-get remove -qqy google-chrome-stable \
  && DEBIAN_FRONTEND=noninteractive apt-get autoremove -qqy

WORKDIR /usr/src/test-results/

VOLUME [ "/usr/src/test-results/" ]

################################################################################
# Layer target: unit test results
################################################################################
FROM smol as unit_test

COPY --from=run_unit_test /usr/src/test-results/ /usr/src/test-results/

VOLUME [ "/usr/src/test-results/" ]

################################################################################
# Layer target: build the application
################################################################################
FROM src as run_build

RUN pnpm build:ssr

VOLUME [ "/usr/src/apps/leadof-us/dist/app/" ]

################################################################################
# Layer target: build results
################################################################################
FROM smol as build

COPY --from=run_build /usr/src/apps/leadof-us/dist/app/ /usr/src/app/dist/app/

VOLUME [ "/usr/src/app/dist/app/" ]

################################################################################
# Layer target: base for playwright browser automation
# All tags: https://mcr.microsoft.com/en-us/product/playwright/about
# IMPORTANT: version must match "@playwright/test" in "./package.json"
################################################################################
FROM ${IMAGE_PLAYWRIGHT_TAG} as playwright

ARG NPM_VERSION
ARG PNPM_VERSION
ARG NPM_REGISTRY_URL
ARG NPM_REGISTRY_OLD_URL_CONFIG
ARG NPM_REGISTRY_URL_CONFIG
ARG NPM_REGISTRY_AUTH
ARG NPM_REGISTRY_AUTH_TOKEN

# Flag as a Continuous Integration server.
ENV CI=true

# Flag that automation can use to detect if execution is hosted in a container.
ENV IN_CONTAINER=true

COPY ./configure-npm.sh /usr/local/bin/configure-npm

RUN chmod +x /usr/local/bin/configure-npm \
  && configure-npm \
  "${NPM_VERSION}" \
  "${PNPM_VERSION}" \
  "${NPM_REGISTRY_URL}" \
  "${NPM_REGISTRY_OLD_URL_CONFIG}" \
  "${NPM_REGISTRY_URL_CONFIG}" \
  "${NPM_REGISTRY_AUTH}" \
  "${NPM_REGISTRY_AUTH_TOKEN}"

################################################################################
# Layer target: playwright with dependencies
################################################################################
FROM playwright as playwright_dependencies

RUN mkdir -p /tmp/dependencies/

COPY --from=dependencies /tmp/dependencies/ /tmp/dependencies/

COPY ./package.json /tmp/dependencies/package.json

WORKDIR /tmp/dependencies/

RUN pnpm install \
  && pnpm playwright install \
  && rm -f ./package.json ./pnpm-lock.yaml

VOLUME [ "/tmp/dependencies/" ]

################################################################################
# Layer target: source code for playwright tests
################################################################################
FROM playwright as playwright_src

RUN mkdir -p /usr/src/apps/leadof-us/

COPY --from=src /usr/src/ /usr/src/

RUN rm -rf /usr/src/apps/leadof-us/node_modules/

COPY --from=playwright_dependencies /tmp/dependencies/node_modules/ /usr/src/apps/leadof-us/node_modules/

WORKDIR /usr/src/apps/leadof-us/

################################################################################
# Layer target: run end-to-end tests
################################################################################
FROM playwright_src as run_e2e

RUN mkdir -p /usr/src/test-results/ \
  && mkdir -p ./test-results/e2e/ \
  && pnpm playwright test \
  && mv ./test-results/e2e/lighthouse.html /usr/src/test-results/ \
  && mv ./test-results/e2e/playwright/index.html /usr/src/test-results/playwright.html \
  && rm -rf /tmp/dependencies/ \
  && rm -rf /usr/src/apps/

WORKDIR /usr/src/test-results/

VOLUME [ "/usr/src/test-results/" ]

################################################################################
# Layer target: end-to-end test results
################################################################################
FROM smol as e2e

COPY --from=run_e2e /usr/src/test-results/ /usr/src/test-results/

VOLUME [ "/usr/src/test-results/" ]

################################################################################
# Layer target: prepare a web production image
################################################################################
FROM node as web

ENV PORT=4000
ENV NODE_ENV=production

COPY --from=build /usr/src/app/dist/app/ /usr/src/app/dist/app/

WORKDIR /usr/src/app/

CMD ["node", "/usr/src/app/dist/app/server/main.js"]
